module FIFO #(parameter data_width =8,ptr_data_width=3,depth=8) (data_in,write_enb,read,reset,read_clock,write_clock,data_out,/*almost_full,almost_empty,*/empty,full);
input [data_width-1:0] data_in;
input write_enb,read,reset,read_clock,write_clock;
output reg [data_width-1:0] data_out;
output reg /*almost_full,almost_empty,*/empty,full;
reg [ptr_data_width:0] binary_write_ptr,binary_read_ptr;
reg [data_width-1:0] mem [0:data_width-1];
wire [ptr_data_width:0]binary_write_ptr_update,binary_read_ptr_update,grey_write_ptr, grey_read_ptr,synchronized_grey_write_ptr, synchronized_grey_read_ptr,synchronized_binary_write_ptr,synchronized_binary_read_ptr;
reg empty_update,full_update;

 
binary2grey #(ptr_data_width) mod1 (binary_write_ptr,grey_write_ptr);
binary2grey #(ptr_data_width) mod2 (binary_read_ptr,grey_read_ptr);
flop_2_synchronizer #(ptr_data_width)mod3(grey_write_ptr,synchronized_grey_write_ptr,reset,read_clock);
flop_2_synchronizer #(ptr_data_width)mod4(grey_read_ptr,synchronized_grey_read_ptr,reset,write_clock);
grey2binary #(ptr_data_width) mod5 (synchronized_grey_write_ptr,synchronized_binary_write_ptr);
grey2binary #(ptr_data_width) mod6 (synchronized_grey_read_ptr,synchronized_binary_read_ptr);

  assign binary_write_ptr_update =(write_enb&&(~full))?1'b1:1'b0;
  assign binary_read_ptr_update =(read&&(~empty))?1'b1:1'b0;
/*assign empty_update= (synchronized_binary_write_ptr==binary_write_ptr)?1'b1:1'b0;
assign full_update= (binary_write_ptr=={~synchronized_binary_read_ptr[ptr_data_width],synchronized_binary_read_ptr[ptr_data_width-1:0]})?1'b1:1'b0;*/
  always @(synchronized_binary_write_ptr or binary_write_ptr)
    begin
      if(synchronized_binary_write_ptr==binary_write_ptr)
        empty_update=1;
      else
        empty_update=0;
      
    end
  always @(binary_write_ptr or synchronized_binary_read_ptr)
    begin
      if(binary_write_ptr=={~synchronized_binary_read_ptr[ptr_data_width],synchronized_binary_read_ptr[ptr_data_width-1:0]})
       full_update=1;
      else
        full_update=0;
    end
always @(posedge write_clock or negedge reset)
begin
if(~reset)
begin
binary_write_ptr<=0;
full<=0;
end
else
begin
binary_write_ptr<=binary_write_ptr_update+binary_write_ptr;
full<=full_update;
end
end


always @(posedge read_clock or negedge reset)
begin
if(~reset)
begin
binary_read_ptr<=0;
empty<=0;
end
else
begin
binary_read_ptr<=binary_read_ptr_update+binary_read_ptr;
empty<=empty_update;
end
end

always @(posedge write_clock)
begin
  if((~full)&&write_enb)
mem[binary_write_ptr[ptr_data_width-1:0]]<=data_in;
else
mem[binary_write_ptr[ptr_data_width-1:0]]<=mem[binary_write_ptr[ptr_data_width-1:0]];
end

always @(posedge read_clock)
begin
  if((~empty)&&read)
data_out<=mem[binary_read_ptr[ptr_data_width-1:0]];
else
data_out<=data_out;
end

endmodule


module binary2grey #(parameter ptr_data_width =3)(in,out);
input [ptr_data_width:0] in;
output reg [ptr_data_width:0] out;
integer i;

always @(in)
begin
out[ptr_data_width] = in[ptr_data_width];
for (i=1;i<=ptr_data_width;i=i+1)
out[ptr_data_width-i] = in[ptr_data_width+1-i]^in[ptr_data_width-i];
end
endmodule

module grey2binary #(parameter ptr_data_width =3)(in,out);
input [ptr_data_width:0] in;
output reg [ptr_data_width:0] out;
integer i;

always @(in)
begin
out[ptr_data_width] = in[ptr_data_width];
for (i=1;i<=ptr_data_width;i=i+1)
out[ptr_data_width-i] = out[ptr_data_width+1-i]^in[ptr_data_width-i];
end
endmodule


module flop_2_synchronizer #(parameter ptr_data_width =3) (in,out,reset,clk);
input [ptr_data_width:0] in;
output reg [ptr_data_width:0] out;
input clk,reset;
reg [ptr_data_width:0] out_1;
always @(posedge clk)
begin
if(~reset)
begin
out_1<=0;
out<=0;
end
else
begin
out_1<=in;
out<=out_1;
end
end
endmodule