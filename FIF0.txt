module fifo(data_in,clk,reset,read,write,data_out,count,full,empty);
input [7:0]data_in;
input clk,reset,read,write;
output reg[7:0]data_in;
output reg[5:0]count;
output reg full,empty;
reg [7:0] ram[0:64];
reg [5:0] read_ptr,write_ptr; always @(count) 
 
 begin 
 empty=(count==0);
 full=(count==63);
 end 
  
always @(posedge clk or posedge reset) 
 begin 
 if(reset) 
 count<=0; 
   else if((!full&&write)&&(!empty&&read)) 
    count<=count;
    else if(!full&&write)
    count<=count+1;
   else if(!empty&&read)
    count<=count-1; 
   else 
     count<=count;  end  
 
always @(posedge clk or posedge reset) 
 begin   
 if(reset) 
  data_out<=0; 
  else
  begin  
  if(!empty&&read)
      data_out<=ram[read_ptr]; 
  else 
      data_out<=data_out;
  end
  end 


always @(posedge clk)  
begin   
if(!full&&write)  
 ram[write_ptr]<=data_in; 
else 
   ram[write_ptr]<=ram[write_ptr]; 
end 
 
always @(posedge clk or posedge reset)  
begin   
if(reset)   
 begin   
 write_ptr<=0;   
 read_ptr<=0; 
 end 
   
else 
 begin   
   if(!full&&write)    
  write_ptr<=write_ptr+1; 
 else       
write_ptr<=write_ptr;   

 if(!empty&&read) 
     read_ptr<=read_ptr+1; 
 else 
    read_ptr<=read_ptr;   
  end 
 end 
endmodule
